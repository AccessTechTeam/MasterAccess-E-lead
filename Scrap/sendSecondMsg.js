const puppeteer = require("puppeteer");
require('./../Helpers/Brwoser'); // Assurez-vous que le chemin du fichier est correct

// Fonction pour envoyer un deuxi√®me message LinkedIn
async function sendSecondeMsg(li_at, lien_linkedin, prenom) {
    const browser = await initializeBrowser(); // Initialisez le navigateur

    try {
        // Le message que vous souhaitez envoyer
        const message = `Bonjour ${prenom},
            J‚Äôesp√®re que vous allez bien‚Ä¶
            Cela fait maintenant quasiment 1 semaine que nous sommes connect√©s et nous n‚Äôavons pas encore eu la possibilit√© d‚Äô√©changer ‚Ä¶.
            Pour vous remercier d‚Äôavoir accept√© mon invitation et pour faire connaissance, je vous propose d‚Äô√©changer intelligemment sur la gestion de votre budget √©nerg√©tique.
            A la fin de ce RDV je serais en mesure de vous √©clairer sur les √©ventuels leviers √† optimiser et cette √©tude vous sera offerte et totalement gratuite.
            Nous comptons √† ce jour + de 3 000 satisfaits et surtout surpris des actions simples et peu co√ªteuses √† mettre en place pour faire des √©conomies.
            Je vous laisse le choix de d√©terminer le jour de votre choix pour un appel t√©l√©phonique qui durera en moyenne 30 minutes.
            üìÜ https://calendly.com/h-diakite/prise-de-rendez-vous
            Qu‚Äôen pensez-vous ?
        `;

        let page = await browser.newPage();

        // D√©finir le cookie de connexion
        await page.setCookie({
            name: "li_at",
            value: li_at,
            domain: "www.linkedin.com",
        });

        // Acc√©der au profil LinkedIn
        await page.goto(lien_linkedin, { waitUntil: "networkidle2" });

        await page.waitForSelector(".pvs-profile-actions");

        const isMessageAvailable = await page.evaluate(() => {
            const statusMessage = document.querySelector(
                ".entry-point.pvs-profile-actions__action > button"
            );

            return statusMessage.getAttribute("aria-label") ? true : false;
        });

        console.log(isMessageAvailable);

        const messageButton = await page.$('.entry-point.pvs-profile-actions__action > button');
        const messageContainer = '.msg-form__contenteditable'; // S√©lecteur CSS

        if (isMessageAvailable) {
            await messageButton.click();

            await page.waitForSelector(".msg-s-event-listitem__message-bubble.msg-s-event-listitem__message-bubble--msg-fwd-enabled", { visible: true });

            const element = await page.evaluate(() => {
                const nbOfMessages = document.querySelectorAll(".msg-s-event-listitem__message-bubble.msg-s-event-listitem__message-bubble--msg-fwd-enabled")
                return nbOfMessages.length
            })

            console.log(element);

            // S'il n'a pas r√©pondu, envoyez-lui un 2√®me message
            await page.waitForSelector(messageContainer);
            await page.click(messageContainer);

            for (let i = 0; i < message.length; i++) {
                await page.type(messageContainer, message[i], { delay: Math.random() * 100 + 50 }); // D√©lai entre 50 et 150 ms
                await new Promise(resolve => setTimeout(resolve, Math.random() * 500)); // Pause al√©atoire
            }

            const btn_envoyer_mtn = ".msg-form__send-button.artdeco-button.artdeco-button--1";

            await page.waitForSelector(btn_envoyer_mtn, { visible: true });

            await new Promise(resolve => setTimeout(resolve, Math.random() * 2000 + 1000)); // D√©lai entre 1 et 3 secondes

            await page.click(btn_envoyer_mtn);
            await new Promise(resolve => setTimeout(resolve, 3000));

            await browser.close();

            return true;
        } else {
            return false;
        }
    } catch (err) {
        console.log(err);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

module.exports = sendSecondeMsg;
